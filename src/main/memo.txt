form受け取り方
※フィールド名(xxx,yyy,zzz)は、HTML側のnameと同じじゃないとだめ
text : (@RequestParam("xxx") String hoge)
radio : (@RequestParam("xxx") String hoge)
checkbox : (@RequestParam("xxx") List<String> hoge)
連想配列 : (Map<String, List<String>> hoge)

1次元配列の場合
        for(String xxx : hoge.getXxx()){
            System.out.println(xxx);
        }
または
        hoge.getXxx().forEach(System.out::println);
で全件表示。getXxx()は、クラスに@Dataをつけるとフィールド名に応じてLombokが自動で作ってくれる。

連想配列の場合
            hoge.getXxx().forEach((key, values) -> {
                System.out.println(key + ": " + values);
            });
で表示。
ただし、バインド先がレコードだとうまくいかない。@Dataつけたクラスで受け取る。

th:object="${hoge}"
でJavaからobjectを受け取りたい場合、名前はpost時のフォームクラス名に依存する。
自分で決めたい場合は@ModelAttribute("huga")で"huga"になる。

ネストクラスに対してバインドしたい場合
public class Hoge(){
    Huga huga;
}
public class Huga(){
 String childValue
}

HTMLでname="huga.chldValue"とするとできる。
https://zenn.dev/peishim/articles/5b3f4f83dc5122

ネストクラスでは、なぜか@Validatedが機能しない。
public class Hoge(){
    @NotNull
    Huga huga;
}
public class Huga(){
    @NotNull
    String childValue
}

と思ってたけど、こうすると機能する
public class Hoge(){
    @Valid
    Huga huga;
}
public class Huga(){
    @NotNull
    String childValue
}
https://riptutorial.com/spring/example/30721/-valid-usage-to-validate-nested-pojos

配列には@NotEmptyをつかう。


任意のタイミングで任意のグループでバリデーションを行いたい場合
Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
Set<ConstraintViolation> violations = validator.validate(targetEntity, new Class[]{group1.class, group2.class});

https://stackoverflow.com/questions/39209644/smartvalidator-manually-calling-validate-with-groups

なお、ネストクラスではうまく機能しなかった。
https://terasolunaorg.github.io/guideline/1.0.2.RELEASE/ja/ArchitectureInDetail/Validation.html#bean
の、5.5.2.1.2. ネストしたBeanの単項目チェック
を見るとネストクラスでもいけるっぽい。

いろいろ試したけどネストクラスのgroupのvalidationがうまくいかなかったので、いっこのFormに全部フィールドまとめてgroupでvalidationチェックすることにした。
(余力があれば)ネストクラスでもgroupでvalidationチェックしたい。

DBとやり取り時、jpaのsaveとかを使わずに、sqlでやろうとすると
IllegalArgumentException: Invalid value type for attribute 'factoryBeanObjectType': java.lang.String
がでる。
mybatis-spring-boot-starter
のバージョンを3.0.3にすると解決する。
https://qiita.com/potole/items/4542e4f8689c89c478cc

@GetMapping("/{id}")
とか作ると、400エラーが出る。
@GetMapping("/student/{id}")
とか、前に一個挟むと解決する。

postgresqlのserialによって自動でつけられたidを取得するには、repositoryのメソッドで
@Options(useGeneratedKeys=true, keyProperty="id") //"id"は、フィールド名にする
https://autopp-tech.hatenablog.com/entry/2019/08/29/093508
これは、setId()によってフィールドのIDを設定している(らしい)ので、setterを持てないrecordでは使えない(多分)。

メソッドの引数が２つ以上有る場合、keyPropertyの値に注意する
@Options(useGeneratedKeys=true,keyProperty ="entity.officialAbsenceId")
void insertMainOA(@Param("entity")OAMainEntity entity,@Param("id") Integer id);

map<String, List<Object>>をthymeleafで表示する
<div th:each="mapEntry : ${lessonInfo}" th:object="${info}">
    [[${mapEntry.key}]]<br>
    <div th:each="v : ${mapEntry.value}">
        [[${v.fieldName}]]
    </div>
</div>
https://github.com/thymeleaf/thymeleaf/issues/748

mapを昇順にするには、TreeMapを使う.

Interceptor
Controllerの呼び出し前や呼び出し後に実行され、認証などができる。
1,HandlerInterceptorを継承する。
2,実行したい関数を作成する。戻り値は真偽値。falseなら失敗。
関数名がpreHandleならController呼び出し前実行、postHandleなら呼び出し後実行。
3,WebMvcConfigurerを継承したクラスで実行するInterceptorや除外するURLを指定する。
registry.addInterceptor()でInterceptor関数追加。
registry.addPathPatterns()でInterceptor対象URL追加。
registry.excludePathPatterns()でInterceptor対象外URL追加。